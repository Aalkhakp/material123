exp2
CREATE REPOSITORY
copy code
vs
new window
clone
paste
newfolder name
explorer newfile ----.html
terminal
commands 
git config name,email
sourcecontrol
+>-
commitchanges
3dots,push
github
addfile
name it
commitchanges
vs
sourcecontrol
3dots pull
exp 3
vs
sourcecontrol
3dots 
branch -new branch
name the branch
publish branch
github
reload 
vs 
feature 3 down
explorer new file
name ----.html
source control
+>-
commitchanges
synchchanges
git new branch -new file -MYR
main- no new file showing
SO MERGE
exp 4
vs
branch check main or not
source control 3 dots
branch -mergebranch
select origin /our branch(feature myr)
synchanges
github 
check main - new file showing or not (MYR)
MERGE CONFLICTS
main branch in github
myr file updated
open myr
edit MYR
write edit MYR
commit changes-github
vs
check file ,main or not,make in to main
synchanges - changed to main -feature myr(our branch)[ 3dots checkout]
[if synchchanges is not there 3 dots pull -changed to main -feature myr(our branch)[ 3dots checkout]]
our branch -open myr file
type something in myr file
(message - )
commit chnages or tick mark
synchanges(not there na close and open vs)
spource control 3 dots
branch 
merge branch
main
paragraph com-accept both changes-typesomethingin your message-   (+>-  myrfile)
commit chnges -synchanges
go to github
reload
open myr file with any branch
exp 5
fork
type search
prasannasmily/hlo-this-
 repo
file in prsana
fork
create newfork
open anyfile from open repo
edit
coomit chnges
pull request
new pull request
pull request
add description
pull request
done


Sure, here are some common Git commands:

1. git init: Initialize a new Git repository.
2. git clone <repository-url>: Clone an existing repository from a remote server.
3. git status: Check the status of your working directory and staging area.
4. git add <file>: Add changes in a file to the staging area.
5. git commit -m "commit message": Commit staged changes with a descriptive message.
6. git push: Push committed changes to a remote repository.
7. git pull: Fetch changes from a remote repository and merge them into the local branch.
8. git branch: List, create, or delete branches.
9. git checkout <branch-name>: Switch to a different branch.
10. git merge <branch-name>: Merge changes from one branch into the current branch.
11. git log: View commit history.
12. git reset <file>: Unstage changes in a file.
13. git revert <commit>: Revert a commit.
14. git stash: Temporarily store changes that are not ready to be committed.
15. git tag: Create, list, delete or verify a tag object signed with GPG.

These are just a few of the many Git commands available. Each command serves a specific purpose in managing your Git repositories.




